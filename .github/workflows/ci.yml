name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Permite execução manual

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run black
        run: black --check .
      
      - name: Run isort
        run: isort --check --profile black .
      
      - name: Run flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run pylint
        run: pylint --disable=C0111,R0903,C0103 $(git ls-files '*.py')

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run bandit
        run: bandit -r . -x ./tests
      
      - name: Run safety check
        run: safety check

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Create .env file for testing
        run: |
          echo "TELEGRAM_TOKEN=dummy_token" > .env
          echo "CLAUDE_API_KEY=dummy_api_key" >> .env
          echo "GITHUB_TOKEN=dummy_github_token" >> .env
          echo "REPOS_BASE_PATH=./test_repos" >> .env
          echo "MCP_API_KEY=dummy_mcp_key" >> .env
          echo "ENCRYPTION_KEY=dummy_encryption_key" >> .env
          echo "AUTHORIZED_USERS=123456789" >> .env
          echo "ADMIN_USER=123456789" >> .env
          mkdir -p test_repos
      
      - name: Run tests
        run: pytest --cov=. --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security-check, test]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: telegram-dev-bot:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
