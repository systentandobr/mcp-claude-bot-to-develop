name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:  # Permite execução manual

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Create .env file for testing
        run: |
          echo "TELEGRAM_TOKEN=dummy_token" > .env
          echo "CLAUDE_API_KEY=dummy_api_key" >> .env
          echo "GITHUB_TOKEN=dummy_github_token" >> .env
          echo "REPOS_BASE_PATH=./test_repos" >> .env
          echo "MCP_API_KEY=dummy_mcp_key" >> .env
          echo "ENCRYPTION_KEY=dummy_encryption_key" >> .env
          echo "AUTHORIZED_USERS=123456789" >> .env
          echo "ADMIN_USER=123456789" >> .env
          mkdir -p test_repos
      
      - name: Run tests
        run: pytest

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/telegram-dev-bot:latest,${{ secrets.DOCKERHUB_USERNAME }}/telegram-dev-bot:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      
      - name: Deploy using SSH
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /opt/telegram-dev-bot
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker image prune -f
          EOF
